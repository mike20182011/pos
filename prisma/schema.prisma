generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id            Int      @id @default(autoincrement())
  nombre        String
  email         String   @unique
  password      String
  rol           Rol // ADMIN, OPERADOR, VENDEDOR
  creadoEn      DateTime @default(now())
  actualizadoEn DateTime @updatedAt

  compras         Compra[]
  comprasAbiertas CompraAbierta[] // relaci칩n con compras abiertas
}

model Proveedor {
  id            Int      @id @default(autoincrement())
  nombre        String
  telefono      String?
  email         String?
  creadoEn      DateTime @default(now())
  actualizadoEn DateTime @updatedAt
  onzasUSD      Float    @default(0)  // total de onzas abiertas en USD
  onzasBOB      Float    @default(0)  // total de onzas abiertas en BOB
  compras         Compra[]
  comprasAbiertas CompraAbierta[] // relaci칩n con compras abiertas
  pagos         PagoProveedor[]
  cierres         CierreProveedor[]
}


model CierreProveedor {
  id             Int      @id @default(autoincrement())
  proveedorId    Int
  proveedor      Proveedor @relation(fields: [proveedorId], references: [id])
  moneda         Moneda    // 'USD' | 'BOB'
  onzasCerradas  Float
  precioUnitario Float
  descuento      Float?    // solo aplica si moneda es USD
  tipoCambio     Float?    // solo aplica si moneda es BOB
  montoCierreUSD Float?    // siempre calculamos en USD
  montoCierreBOB Float?    // solo si es BOB
  creadoEn       DateTime  @default(now())
}


model Compra {
  id          Int        @id @default(autoincrement())
  fecha       DateTime   @default(now())
  tipoCompra  TipoCompra // CERRADA o ABIERTA
  moneda      Moneda // USD o BOB
  descuento   Float? // Solo aplica si moneda = USD
  tipoCambio  Float? // Solo aplica si moneda = BOB
  precioUnit  Float  
  usuarioId   Int
  proveedorId Int

  montoUSD    Float?
  montoBOB    Float?
  totalOnzas Float?


  usuario   Usuario   @relation(fields: [usuarioId], references: [id])
  proveedor Proveedor @relation(fields: [proveedorId], references: [id])

  barras Barra[]
  pagos  PagoCompra[] // Pagos parciales de la compra completa
}

model Barra {
  id              Int        @id @default(autoincrement())
  pesoGr          Float
  purezaArriba    Float
  purezaAbajo     Float
  purezaDerecha   Float
  purezaIzquierda Float
  pureza          Float
  pesoFino        Float // 游녣 Nuevo: pesoGr * pureza
  onzas           Float // 游녣 Nuevo: pesoFino / 31.1035
  precioUnit      Float
  montoTotal      Float // calculado: onzas * precioUnit
  tipoCompra      TipoCompra // CERRADA o ABIERTA

  compraId Int
  compra   Compra @relation(fields: [compraId], references: [id])
}

model PagoCompra {
  id          Int      @id @default(autoincrement())
  fecha       DateTime @default(now())
  monto       Float
  moneda      Moneda
  observacion String?

  compraId Int
  compra   Compra @relation(fields: [compraId], references: [id])
}

enum TipoCompra {
  CERRADA
  ABIERTA
}

enum Moneda {
  USD
  BOB
}

enum Rol {
  ADMIN
  OPERADOR
  VENDEDOR
}

model CompraAbierta {
  id            Int      @id @default(autoincrement())
  fecha         DateTime @default(now())
  moneda        Moneda
  descuento     Float? // igual que en Compra
  tipoCambio    Float? // igual que en Compra
  precioInicial Float // precio pactado por onza al inicio
  onzasTotales  Float // total de onzas que cubrir치n la compra
  montoTotal    Float
  montoBOB      Float? 
  usuarioId     Int
  proveedorId   Int

  usuario   Usuario   @relation(fields: [usuarioId], references: [id])
  proveedor Proveedor @relation(fields: [proveedorId], references: [id])

  barras  BarraAbierta[]
  pagos   PagoCompraAbierta[]
  cierres CierreCompraAbierta[]
}

model BarraAbierta {
  id              Int   @id @default(autoincrement())
  pesoGr          Float
  purezaArriba    Float
  purezaAbajo     Float
  purezaDerecha   Float
  purezaIzquierda Float
  pureza          Float
  pesoFino        Float
  onzas           Float

  montoUSD        Float?   // calculado autom치ticamente si la compra es USD
  montoBOB        Float?

  compraAbiertaId Int
  compraAbierta   CompraAbierta @relation(fields: [compraAbiertaId], references: [id])

  historicos      BarraAbiertaHistorico[]
}


model BarraAbiertaHistorico {
  id              Int      @id @default(autoincrement())
  barraAbiertaId  Int
  onzasOriginal   Float
  fecha           DateTime @default(now())
  usuarioId       Int?     // opcional, si quieres guardar el usuario que hizo el cambio

  barraAbierta    BarraAbierta @relation(fields: [barraAbiertaId], references: [id])
}


model PagoCompraAbierta {
  id          Int      @id @default(autoincrement())
  fecha       DateTime @default(now())
  monto       Float
  moneda      Moneda
  observacion String?

  compraAbiertaId Int
  compraAbierta   CompraAbierta @relation(fields: [compraAbiertaId], references: [id])
}

model PagoProveedor {
  id          Int       @id @default(autoincrement())
  fecha       DateTime  @default(now())
  monto       Float
  moneda      Moneda
  observacion String?

  proveedorId Int
  proveedor   Proveedor @relation(fields: [proveedorId], references: [id])
}


model CierreCompraAbierta {
  id            Int      @id @default(autoincrement())
  fecha         DateTime @default(now())
  onzasCerradas Float
  precioCierre  Float // precio final pactado en el cierre
  precioCierreBOB  Float?   // precio en BOB calculado con el tipo de cambio
  tipoCambio       Float?   // tipo de cambio aplicado al cierre
  montoCierre   Float
  descuento       Float?
  compraAbiertaId Int
  compraAbierta   CompraAbierta @relation(fields: [compraAbiertaId], references: [id])
}
